#!/usr/local/bin/dot
#
# Class diagram 
# Generated by UMLGraph version R5_6-24-gf6e263 (http://www.umlgraph.org/)
#

digraph G {
	edge [fontname="Helvetica",fontsize=10,labelfontname="Helvetica",labelfontsize=10];
	node [fontname="Helvetica",fontsize=10,shape=plaintext];
	nodesep=0.25;
	ranksep=0.5;
	// ev3dev.actuators.LCD
	c0 [label=<<table title="ev3dev.actuators.LCD" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./LCD.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> LCD </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + LCD() </td></tr>
<tr><td align="left" balign="left"> + getInstance() : GraphicsLCD </td></tr>
		</table></td></tr>
		</table>>, URL="./LCD.html", fontname="Helvetica", fontcolor="black", fontsize=9.0];
	// ev3dev.actuators.LCDJessie
	c1 [label=<<table title="ev3dev.actuators.LCDJessie" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./LCDJessie.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> LCDJessie </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - log : Logger </td></tr>
<tr><td align="left" balign="left"> + EV3DEV_EV3_DEVICES_PATH : String </td></tr>
<tr><td align="left" balign="left"> + EV3DEV_EV3_LCD_NAME : String </td></tr>
<tr><td align="left" balign="left"> + EV3DEV_EV3_LCD_PATH : String </td></tr>
<tr><td align="left" balign="left"> + EV3DEV_LCD_KEY : String </td></tr>
<tr><td align="left" balign="left"> + FB_PATH : String </td></tr>
<tr><td align="left" balign="left"> - SCREEN_WIDTH : int </td></tr>
<tr><td align="left" balign="left"> - SCREEN_HEIGHT : int </td></tr>
<tr><td align="left" balign="left"> - LINE_LEN : int </td></tr>
<tr><td align="left" balign="left"> - BUFFER_SIZE : int </td></tr>
<tr><td align="left" balign="left"> + EV3_SCREEN_WIDTH : int </td></tr>
<tr><td align="left" balign="left"> + EV3_SCREEN_HEIGHT : int </td></tr>
<tr><td align="left" balign="left"> + EV3_LINE_LEN : int </td></tr>
<tr><td align="left" balign="left"> + EV3_ROWS : int </td></tr>
<tr><td align="left" balign="left"> + EV3_BUFFER_SIZE : int </td></tr>
<tr><td align="left" balign="left"> - image : BufferedImage </td></tr>
<tr><td align="left" balign="left"> - g2d : Graphics2D </td></tr>
<tr><td align="left" balign="left"> - instance : GraphicsLCD </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - LCDJessie() </td></tr>
<tr><td align="left" balign="left"> + getInstance() : GraphicsLCD </td></tr>
<tr><td align="left" balign="left"> - init(width : int, height : int, lineLength : int, bufferSize : int) </td></tr>
<tr><td align="left" balign="left"> + getImage() : BufferedImage </td></tr>
<tr><td align="left" balign="left"> + flush() </td></tr>
<tr><td align="left" balign="left"> + translate(x : int, y : int) </td></tr>
<tr><td align="left" balign="left"> + getFont() : Font </td></tr>
<tr><td align="left" balign="left"> + setFont(font : Font) </td></tr>
<tr><td align="left" balign="left"> + getTranslateX() : int </td></tr>
<tr><td align="left" balign="left"> + getTranslateY() : int </td></tr>
<tr><td align="left" balign="left"> + setColor(color : int) </td></tr>
<tr><td align="left" balign="left"> + setColor(i : int, i1 : int, i2 : int) </td></tr>
<tr><td align="left" balign="left"> + setPixel(i : int, i1 : int, i2 : int) </td></tr>
<tr><td align="left" balign="left"> + getPixel(i : int, i1 : int) : int </td></tr>
<tr><td align="left" balign="left"> + drawString(s : String, i : int, i1 : int, i2 : int, b : boolean) </td></tr>
<tr><td align="left" balign="left"> + drawString(s : String, i : int, i1 : int, i2 : int) </td></tr>
<tr><td align="left" balign="left"> + drawSubstring(s : String, i : int, i1 : int, i2 : int, i3 : int, i4 : int) </td></tr>
<tr><td align="left" balign="left"> + drawChar(c : char, i : int, i1 : int, i2 : int) </td></tr>
<tr><td align="left" balign="left"> + drawChars(chars : char[], i : int, i1 : int, i2 : int, i3 : int, i4 : int) </td></tr>
<tr><td align="left" balign="left"> + getStrokeStyle() : int </td></tr>
<tr><td align="left" balign="left"> + setStrokeStyle(i : int) </td></tr>
<tr><td align="left" balign="left"> + drawRegionRop(image : Image, i : int, i1 : int, i2 : int, i3 : int, i4 : int, i5 : int, i6 : int, i7 : int) </td></tr>
<tr><td align="left" balign="left"> + drawRegionRop(image : Image, i : int, i1 : int, i2 : int, i3 : int, i4 : int, i5 : int, i6 : int, i7 : int, i8 : int) </td></tr>
<tr><td align="left" balign="left"> + drawRegion(image : Image, i : int, i1 : int, i2 : int, i3 : int, i4 : int, i5 : int, i6 : int, i7 : int) </td></tr>
<tr><td align="left" balign="left"> + drawImage(image : Image, i : int, i1 : int, i2 : int) </td></tr>
<tr><td align="left" balign="left"> + drawLine(x1 : int, y1 : int, x2 : int, y2 : int) </td></tr>
<tr><td align="left" balign="left"> + fillRect(x : int, y : int, width : int, height : int) </td></tr>
<tr><td align="left" balign="left"> + copyArea(i : int, i1 : int, i2 : int, i3 : int, i4 : int, i5 : int, i6 : int) </td></tr>
<tr><td align="left" balign="left"> + drawRoundRect(x : int, y : int, width : int, height : int, arcWidth : int, arcHeight : int) </td></tr>
<tr><td align="left" balign="left"> + drawRect(x : int, y : int, width : int, height : int) </td></tr>
<tr><td align="left" balign="left"> + drawArc(x : int, y : int, width : int, height : int, startAngle : int, arcAngle : int) </td></tr>
<tr><td align="left" balign="left"> + fillArc(x : int, y : int, width : int, height : int, startAngle : int, arcAngle : int) </td></tr>
<tr><td align="left" balign="left"> + refresh() </td></tr>
<tr><td align="left" balign="left"> + clear() </td></tr>
<tr><td align="left" balign="left"> + getWidth() : int </td></tr>
<tr><td align="left" balign="left"> + getHeight() : int </td></tr>
<tr><td align="left" balign="left"> + getDisplay() : byte[] </td></tr>
<tr><td align="left" balign="left"> + getHWDisplay() : byte[] </td></tr>
<tr><td align="left" balign="left"> + setContrast(i : int) </td></tr>
<tr><td align="left" balign="left"> + bitBlt(bytes : byte[], i : int, i1 : int, i2 : int, i3 : int, i4 : int, i5 : int, i6 : int, i7 : int, i8 : int) </td></tr>
<tr><td align="left" balign="left"> + bitBlt(bytes : byte[], i : int, i1 : int, i2 : int, i3 : int, bytes1 : byte[], i4 : int, i5 : int, i6 : int, i7 : int, i8 : int, i9 : int, i10 : int) </td></tr>
<tr><td align="left" balign="left"> + setAutoRefresh(b : boolean) </td></tr>
<tr><td align="left" balign="left"> + setAutoRefreshPeriod(i : int) : int </td></tr>
		</table></td></tr>
		</table>>, URL="./LCDJessie.html", fontname="Helvetica", fontcolor="black", fontsize=9.0];
	// ev3dev.actuators.LCDStretch
	c2 [label=<<table title="ev3dev.actuators.LCDStretch" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./LCDStretch.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> LCDStretch </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + EV3DEV_LCD_KEY : String </td></tr>
<tr><td align="left" balign="left"> + EV3DEV_LCD_DEFAULT : String </td></tr>
<tr><td align="left" balign="left"> + EV3DEV_LCD_MODE_KEY : String </td></tr>
<tr><td align="left" balign="left"> - log : Logger </td></tr>
<tr><td align="left" balign="left"> - fb : JavaFramebuffer </td></tr>
<tr><td align="left" balign="left"> - image : BufferedImage </td></tr>
<tr><td align="left" balign="left"> - g2d : Graphics2D </td></tr>
<tr><td align="left" balign="left"> - timer : Timer </td></tr>
<tr><td align="left" balign="left"> - timer_run : boolean </td></tr>
<tr><td align="left" balign="left"> - timer_msec : int </td></tr>
<tr><td align="left" balign="left"> - stroke : int </td></tr>
<tr><td align="left" balign="left"> - instance : LCDStretch </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - LCDStretch() </td></tr>
<tr><td align="left" balign="left"> + getInstance() : GraphicsLCD </td></tr>
<tr><td align="left" balign="left"> + getFramebuffer() : JavaFramebuffer </td></tr>
<tr><td align="left" balign="left"> + flush() </td></tr>
<tr><td align="left" balign="left"> + translate(x : int, y : int) </td></tr>
<tr><td align="left" balign="left"> + getFont() : Font </td></tr>
<tr><td align="left" balign="left"> + setFont(font : Font) </td></tr>
<tr><td align="left" balign="left"> + getTranslateX() : int </td></tr>
<tr><td align="left" balign="left"> + getTranslateY() : int </td></tr>
<tr><td align="left" balign="left"> + setColor(rgb : int) </td></tr>
<tr><td align="left" balign="left"> + setColor(r : int, g : int, b : int) </td></tr>
<tr><td align="left" balign="left"> + setPixel(x : int, y : int, color : int) </td></tr>
<tr><td align="left" balign="left"> + getPixel(x : int, y : int) : int </td></tr>
<tr><td align="left" balign="left"> + drawString(str : String, x : int, y : int, anchor : int, inverted : boolean) </td></tr>
<tr><td align="left" balign="left"> + drawString(str : String, x : int, y : int, anchor : int) </td></tr>
<tr><td align="left" balign="left"> + drawSubstring(str : String, offset : int, len : int, x : int, y : int, anchor : int) </td></tr>
<tr><td align="left" balign="left"> + drawChar(character : char, x : int, y : int, anchor : int) </td></tr>
<tr><td align="left" balign="left"> + drawChars(data : char[], offset : int, length : int, x : int, y : int, anchor : int) </td></tr>
<tr><td align="left" balign="left"> + getStrokeStyle() : int </td></tr>
<tr><td align="left" balign="left"> + setStrokeStyle(i : int) </td></tr>
<tr><td align="left" balign="left"> + drawRegionRop(src : Image, sx : int, sy : int, w : int, h : int, x : int, y : int, anchor : int, rop : int) </td></tr>
<tr><td align="left" balign="left"> + drawRegionRop(src : Image, sx : int, sy : int, w : int, h : int, transform : int, x : int, y : int, anchor : int, rop : int) </td></tr>
<tr><td align="left" balign="left"> + drawRegion(src : Image, sx : int, sy : int, w : int, h : int, transform : int, x : int, y : int, anchor : int) </td></tr>
<tr><td align="left" balign="left"> + drawImage(image : Image, i : int, i1 : int, i2 : int) </td></tr>
<tr><td align="left" balign="left"> + drawLine(x1 : int, y1 : int, x2 : int, y2 : int) </td></tr>
<tr><td align="left" balign="left"> + fillRect(x : int, y : int, width : int, height : int) </td></tr>
<tr><td align="left" balign="left"> + copyArea(sx : int, sy : int, w : int, h : int, x : int, y : int, anchor : int) </td></tr>
<tr><td align="left" balign="left"> - adjustX(x : int, w : int, anchor : int) : int </td></tr>
<tr><td align="left" balign="left"> - adjustY(y : int, h : int, anchor : int) : int </td></tr>
<tr><td align="left" balign="left"> + drawRoundRect(x : int, y : int, width : int, height : int, arcWidth : int, arcHeight : int) </td></tr>
<tr><td align="left" balign="left"> + drawRect(x : int, y : int, width : int, height : int) </td></tr>
<tr><td align="left" balign="left"> + drawArc(x : int, y : int, width : int, height : int, startAngle : int, arcAngle : int) </td></tr>
<tr><td align="left" balign="left"> + fillArc(x : int, y : int, width : int, height : int, startAngle : int, arcAngle : int) </td></tr>
<tr><td align="left" balign="left"> + refresh() </td></tr>
<tr><td align="left" balign="left"> + clear() </td></tr>
<tr><td align="left" balign="left"> + getWidth() : int </td></tr>
<tr><td align="left" balign="left"> + getHeight() : int </td></tr>
<tr><td align="left" balign="left"> + getDisplay() : byte[] </td></tr>
<tr><td align="left" balign="left"> + getHWDisplay() : byte[] </td></tr>
<tr><td align="left" balign="left"> + setContrast(i : int) </td></tr>
<tr><td align="left" balign="left"> - lejos2rgb(src : byte[], width : int, height : int) : BufferedImage </td></tr>
<tr><td align="left" balign="left"> - any2rgb(img : Image) : BufferedImage </td></tr>
<tr><td align="left" balign="left"> - any2lejos(img : BufferedImage) : byte[] </td></tr>
<tr><td align="left" balign="left"> - java_lejos_flip(in : BufferedImage, out : BufferedImage) : BufferedImage </td></tr>
<tr><td align="left" balign="left"> + bitBlt(src : byte[], sw : int, sh : int, sx : int, sy : int, dx : int, dy : int, w : int, h : int, rop : int) </td></tr>
<tr><td align="left" balign="left"> + bitBlt(src : byte[], sw : int, sh : int, sx : int, sy : int, dst : byte[], dw : int, dh : int, dx : int, dy : int, w : int, h : int, rop : int) </td></tr>
<tr><td align="left" balign="left"> - bitBlt(src : BufferedImage, sx : int, sy : int, dst : BufferedImage, dx : int, dy : int, w : int, h : int, rop : int) </td></tr>
<tr><td align="left" balign="left"> + setAutoRefresh(b : boolean) </td></tr>
<tr><td align="left" balign="left"> + setAutoRefreshPeriod(i : int) : int </td></tr>
<tr><td align="left" balign="left"> - timerUpdate() </td></tr>
		</table></td></tr>
		</table>>, URL="./LCDStretch.html", fontname="Helvetica", fontcolor="black", fontsize=9.0];
	// ev3dev.actuators.LCDStretch.Flusher
	c3 [label=<<table title="ev3dev.actuators.LCDStretch.Flusher" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./LCDStretch.Flusher.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Flusher </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - Flusher() </td></tr>
<tr><td align="left" balign="left"> + run() </td></tr>
		</table></td></tr>
		</table>>, URL="./LCDStretch.Flusher.html", fontname="Helvetica", fontcolor="black", fontsize=9.0];
	// ev3dev.actuators.Sound
	c4 [label=<<table title="ev3dev.actuators.Sound" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./Sound.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Sound </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - LOGGER : Logger </td></tr>
<tr><td align="left" balign="left"> - EV3_PHYSICAL_SOUND_PATH : String </td></tr>
<tr><td align="left" balign="left"> + EV3DEV_SOUND_KEY : String </td></tr>
<tr><td align="left" balign="left"> - EV3_SOUND_PATH : String </td></tr>
<tr><td align="left" balign="left"> - CMD_BEEP : String </td></tr>
<tr><td align="left" balign="left"> + VOLUME : String </td></tr>
<tr><td align="left" balign="left"> - VOLUME_PATH : String </td></tr>
<tr><td align="left" balign="left"> - DISABLED_FEATURE_MESSAGE : String </td></tr>
<tr><td align="left" balign="left"> - CURRENT_DISTRO : EV3DevDistro </td></tr>
<tr><td align="left" balign="left"> - instance : Sound </td></tr>
<tr><td align="left" balign="left"> - volume : int </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - Sound() </td></tr>
<tr><td align="left" balign="left"> + getInstance() : Sound </td></tr>
<tr><td align="left" balign="left"> + beep() </td></tr>
<tr><td align="left" balign="left"> + twoBeeps() </td></tr>
<tr><td align="left" balign="left"> + playTone(frequency : int, duration : int, volume : int) </td></tr>
<tr><td align="left" balign="left"> + playTone(frequency : int, duration : int) </td></tr>
<tr><td align="left" balign="left"> + playSample(file : File, volume : int) </td></tr>
<tr><td align="left" balign="left"> + playSample(file : File) </td></tr>
<tr><td align="left" balign="left"> + setVolume(volume : int) </td></tr>
<tr><td align="left" balign="left"> + getVolume() : int </td></tr>
		</table></td></tr>
		</table>>, URL="./Sound.html", fontname="Helvetica", fontcolor="black", fontsize=9.0];
}

