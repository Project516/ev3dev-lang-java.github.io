#!/usr/local/bin/dot
#
# Class diagram 
# Generated by UMLGraph version R5_6-24-gf6e263 (http://www.umlgraph.org/)
#

digraph G {
	edge [fontname="Helvetica",fontsize=10,labelfontname="Helvetica",labelfontsize=10];
	node [fontname="Helvetica",fontsize=10,shape=plaintext];
	nodesep=0.25;
	ranksep=0.5;
	// lejos.robotics.navigation.DifferentialPilot
	c2293 [label=<<table title="lejos.robotics.navigation.DifferentialPilot" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./DifferentialPilot.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> DifferentialPilot </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - _turnRadius : float </td></tr>
<tr><td align="left" balign="left"> # _left : RegulatedMotor </td></tr>
<tr><td align="left" balign="left"> # _right : RegulatedMotor </td></tr>
<tr><td align="left" balign="left"> - _inside : RegulatedMotor </td></tr>
<tr><td align="left" balign="left"> # _outside : RegulatedMotor </td></tr>
<tr><td align="left" balign="left"> - _steerRatio : float </td></tr>
<tr><td align="left" balign="left"> # _leftDegPerDistance : float </td></tr>
<tr><td align="left" balign="left"> # _rightDegPerDistance : float </td></tr>
<tr><td align="left" balign="left"> - _leftTurnRatio : float </td></tr>
<tr><td align="left" balign="left"> - _rightTurnRatio : float </td></tr>
<tr><td align="left" balign="left"> - _robotTravelSpeed : float </td></tr>
<tr><td align="left" balign="left"> - _robotRotateSpeed : float </td></tr>
<tr><td align="left" balign="left"> - _parity : byte </td></tr>
<tr><td align="left" balign="left"> - _trackWidth : float </td></tr>
<tr><td align="left" balign="left"> - _leftWheelDiameter : float </td></tr>
<tr><td align="left" balign="left"> - _rightWheelDiameter : float </td></tr>
<tr><td align="left" balign="left"> - _leftTC : int </td></tr>
<tr><td align="left" balign="left"> - _rightTC : int </td></tr>
<tr><td align="left" balign="left"> - _listeners : ArrayList&lt;MoveListener&gt; </td></tr>
<tr><td align="left" balign="left"> # _type : Move.MoveType </td></tr>
<tr><td align="left" balign="left"> - _distance : double </td></tr>
<tr><td align="left" balign="left"> - _angle : double </td></tr>
<tr><td align="left" balign="left"> - _acceleration : int </td></tr>
<tr><td align="left" balign="left"> - _quickAcceleration : int </td></tr>
<tr><td align="left" balign="left"> - _leftDirection : byte </td></tr>
<tr><td align="left" balign="left"> - _rightDirection : byte </td></tr>
<tr><td align="left" balign="left"> - _monitor : DifferentialPilot.Monitor </td></tr>
<tr><td align="left" balign="left"> - _moveActive : boolean </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + DifferentialPilot(wheelDiameter : double, trackWidth : double, leftMotor : RegulatedMotor, rightMotor : RegulatedMotor) </td></tr>
<tr><td align="left" balign="left"> + DifferentialPilot(wheelDiameter : double, trackWidth : double, leftMotor : RegulatedMotor, rightMotor : RegulatedMotor, reverse : boolean) </td></tr>
<tr><td align="left" balign="left"> + DifferentialPilot(leftWheelDiameter : double, rightWheelDiameter : double, trackWidth : double, leftMotor : RegulatedMotor, rightMotor : RegulatedMotor, reverse : boolean) </td></tr>
<tr><td align="left" balign="left"> - getLeftCount() : int </td></tr>
<tr><td align="left" balign="left"> - getRightCount() : int </td></tr>
<tr><td align="left" balign="left"> - setSpeed(leftSpeed : int, rightSpeed : int) </td></tr>
<tr><td align="left" balign="left"> + setLinearSpeed(travelSpeed : double) </td></tr>
<tr><td align="left" balign="left"> + getLinearSpeed() : double </td></tr>
<tr><td align="left" balign="left"> + setLinearAcceleration(acceleration : double) </td></tr>
<tr><td align="left" balign="left"> + getLinearAcceleration() : double </td></tr>
<tr><td align="left" balign="left"> - setMotorAccel(acceleration : int) </td></tr>
<tr><td align="left" balign="left"> + getMaxLinearSpeed() : double </td></tr>
<tr><td align="left" balign="left"> + setAngularSpeed(rotateSpeed : double) </td></tr>
<tr><td align="left" balign="left"> + getAngularSpeed() : double </td></tr>
<tr><td align="left" balign="left"> + getMaxRotateSpeed() : float </td></tr>
<tr><td align="left" balign="left"> + getMaxAngularSpeed() : double </td></tr>
<tr><td align="left" balign="left"> + forward() </td></tr>
<tr><td align="left" balign="left"> + backward() </td></tr>
<tr><td align="left" balign="left"> - bak() </td></tr>
<tr><td align="left" balign="left"> - fwd() </td></tr>
<tr><td align="left" balign="left"> + rotateLeft() </td></tr>
<tr><td align="left" balign="left"> + rotateRight() </td></tr>
<tr><td align="left" balign="left"> + rotate(angle : double) </td></tr>
<tr><td align="left" balign="left"> + rotate(angle : double, immediateReturn : boolean) </td></tr>
<tr><td align="left" balign="left"> + stop() </td></tr>
<tr><td align="left" balign="left"> + quickStop() </td></tr>
<tr><td align="left" balign="left"> + travel(distance : double) </td></tr>
<tr><td align="left" balign="left"> + travel(distance : double, immediateReturn : boolean) </td></tr>
<tr><td align="left" balign="left"> + arcForward(radius : double) </td></tr>
<tr><td align="left" balign="left"> + arcBackward(radius : double) </td></tr>
<tr><td align="left" balign="left"> + arc(radius : double, angle : double) </td></tr>
<tr><td align="left" balign="left"> + arc(radius : double, angle : double, immediateReturn : boolean) </td></tr>
<tr><td align="left" balign="left"> + travelArc(radius : double, distance : double) </td></tr>
<tr><td align="left" balign="left"> + travelArc(radius : double, distance : double, immediateReturn : boolean) </td></tr>
<tr><td align="left" balign="left"> - turnRate(radius : double) : double </td></tr>
<tr><td align="left" balign="left"> - radius(turnRate : double) : double </td></tr>
<tr><td align="left" balign="left"> + steer(turnRate : double) </td></tr>
<tr><td align="left" balign="left"> + steerBackward(turnRate : double) </td></tr>
<tr><td align="left" balign="left"> + steer(turnRate : double, angle : double) </td></tr>
<tr><td align="left" balign="left"> + steer(turnRate : double, angle : double, immediateReturn : boolean) </td></tr>
<tr><td align="left" balign="left"> ~ steerPrep(turnRate : double) </td></tr>
<tr><td align="left" balign="left"> # movementStart() </td></tr>
<tr><td align="left" balign="left"> # movementActive() </td></tr>
<tr><td align="left" balign="left"> - movementStop() </td></tr>
<tr><td align="left" balign="left"> + isMoving() : boolean </td></tr>
<tr><td align="left" balign="left"> - waitComplete() </td></tr>
<tr><td align="left" balign="left"> - waitForActiveMove() </td></tr>
<tr><td align="left" balign="left"> + isStalled() : boolean </td></tr>
<tr><td align="left" balign="left"> + reset() </td></tr>
<tr><td align="left" balign="left"> + setMinRadius(radius : double) </td></tr>
<tr><td align="left" balign="left"> + getMinRadius() : double </td></tr>
<tr><td align="left" balign="left"> + getMovementIncrement() : float </td></tr>
<tr><td align="left" balign="left"> + getAngleIncrement() : float </td></tr>
<tr><td align="left" balign="left"> + addMoveListener(m : MoveListener) </td></tr>
<tr><td align="left" balign="left"> + getMovement() : Move </td></tr>
<tr><td align="left" balign="left"> + getTurnRate() : double </td></tr>
<tr><td align="left" balign="left"> + setAngularAcceleration(acceleration : double) </td></tr>
<tr><td align="left" balign="left"> + getAngularAcceleration() : double </td></tr>
		</table></td></tr>
		</table>>, URL="./DifferentialPilot.html", fontname="Helvetica", fontcolor="black", fontsize=9.0];
	// lejos.robotics.navigation.Move
	c2296 [label=<<table title="lejos.robotics.navigation.Move" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./Move.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Move </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - distanceTraveled : float </td></tr>
<tr><td align="left" balign="left"> - angleTurned : float </td></tr>
<tr><td align="left" balign="left"> - moveType : Move.MoveType </td></tr>
<tr><td align="left" balign="left"> - arcRadius : float </td></tr>
<tr><td align="left" balign="left"> - isMoving : boolean </td></tr>
<tr><td align="left" balign="left"> - timeStamp : long </td></tr>
<tr><td align="left" balign="left"> - travelSpeed : float </td></tr>
<tr><td align="left" balign="left"> - rotateSpeed : float </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + Move(distance : float, angle : float, isMoving : boolean) </td></tr>
<tr><td align="left" balign="left"> + Move(type : Move.MoveType, distance : float, angle : float, travelSpeed : float, rotateSpeed : float, isMoving : boolean) </td></tr>
<tr><td align="left" balign="left"> + Move(type : Move.MoveType, distance : float, angle : float, isMoving : boolean) </td></tr>
<tr><td align="left" balign="left"> + Move(isMoving : boolean, angle : float, turnRadius : float) </td></tr>
<tr><td align="left" balign="left"> + setValues(type : Move.MoveType, distance : float, angle : float, isMoving : boolean) </td></tr>
<tr><td align="left" balign="left"> + setDynamics(travelSpeed : float, rotateSpeed : float) </td></tr>
<tr><td align="left" balign="left"> - calcMoveType(distance : float, angle : float) : Move.MoveType </td></tr>
<tr><td align="left" balign="left"> + getDistanceTraveled() : float </td></tr>
<tr><td align="left" balign="left"> + getTimeStamp() : long </td></tr>
<tr><td align="left" balign="left"> + getAngleTurned() : float </td></tr>
<tr><td align="left" balign="left"> + getMoveType() : Move.MoveType </td></tr>
<tr><td align="left" balign="left"> + getArcRadius() : float </td></tr>
<tr><td align="left" balign="left"> + getTravelSpeed() : float </td></tr>
<tr><td align="left" balign="left"> + getRotateSpeed() : float </td></tr>
<tr><td align="left" balign="left"> + isMoving() : boolean </td></tr>
<tr><td align="left" balign="left"> + convertDistanceToAngle(distance : float, turnRadius : float) : float </td></tr>
<tr><td align="left" balign="left"> + convertAngleToDistance(angle : float, turnRadius : float) : float </td></tr>
<tr><td align="left" balign="left"> + dumpObject(dos : DataOutputStream) </td></tr>
<tr><td align="left" balign="left"> + loadObject(dis : DataInputStream) </td></tr>
<tr><td align="left" balign="left"> + toString() : String </td></tr>
		</table></td></tr>
		</table>>, URL="./Move.html", fontname="Helvetica", fontcolor="black", fontsize=9.0];
	// lejos.robotics.navigation.Move.MoveType
	c2297 [label=<<table title="lejos.robotics.navigation.Move.MoveType" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" bgcolor="lemonChiffon" href="./Move.MoveType.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> &#171;enumeration&#187; </td></tr>
<tr><td align="center" balign="center"> MoveType </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> TRAVEL </td></tr>
<tr><td align="left" balign="left"> ROTATE </td></tr>
<tr><td align="left" balign="left"> ARC </td></tr>
<tr><td align="left" balign="left"> STOP </td></tr>
		</table></td></tr>
		</table>>, URL="./Move.MoveType.html", fontname="Helvetica", fontcolor="black", fontsize=9.0];
	// lejos.robotics.navigation.DifferentialPilot NAVASSOC lejos.robotics.navigation.Move.MoveType
	c2293:p -> c2297:p [taillabel="", label="", headlabel="", fontname="Helvetica", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// lejos.robotics.navigation.Move NAVASSOC lejos.robotics.navigation.Move.MoveType
	c2296:p -> c2297:p [taillabel="", label="", headlabel="", fontname="Helvetica", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
}

