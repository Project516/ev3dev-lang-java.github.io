#!/usr/local/bin/dot
#
# Class diagram 
# Generated by UMLGraph version R5_6-24-gf6e263 (http://www.umlgraph.org/)
#

digraph G {
	edge [fontname="Helvetica",fontsize=10,labelfontname="Helvetica",labelfontsize=10];
	node [fontname="Helvetica",fontsize=10,shape=plaintext];
	nodesep=0.25;
	ranksep=0.5;
	// ev3dev.actuators.LCD
	c2084 [label=<<table title="ev3dev.actuators.LCD" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" bgcolor="lemonChiffon" href="./LCD.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> LCD </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - log : Logger </td></tr>
<tr><td align="left" balign="left"> + FB_PATH : String </td></tr>
<tr><td align="left" balign="left"> - SCREEN_WIDTH : int </td></tr>
<tr><td align="left" balign="left"> - SCREEN_HEIGHT : int </td></tr>
<tr><td align="left" balign="left"> - LINE_LEN : int </td></tr>
<tr><td align="left" balign="left"> - BUFFER_SIZE : int </td></tr>
<tr><td align="left" balign="left"> + EV3_SCREEN_WIDTH : int </td></tr>
<tr><td align="left" balign="left"> + EV3_SCREEN_HEIGHT : int </td></tr>
<tr><td align="left" balign="left"> + EV3_LINE_LEN : int </td></tr>
<tr><td align="left" balign="left"> + EV3_ROWS : int </td></tr>
<tr><td align="left" balign="left"> + EV3_BUFFER_SIZE : int </td></tr>
<tr><td align="left" balign="left"> - image : BufferedImage </td></tr>
<tr><td align="left" balign="left"> - g2d : Graphics2D </td></tr>
<tr><td align="left" balign="left"> - Instance : GraphicsLCD </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - LCD() </td></tr>
<tr><td align="left" balign="left"> + getInstance() : GraphicsLCD </td></tr>
<tr><td align="left" balign="left"> - init(width : int, height : int, lineLength : int, bufferSize : int) </td></tr>
<tr><td align="left" balign="left"> + getImage() : BufferedImage </td></tr>
<tr><td align="left" balign="left"> + flush() </td></tr>
<tr><td align="left" balign="left"> + translate(x : int, y : int) </td></tr>
<tr><td align="left" balign="left"> + getFont() : Font </td></tr>
<tr><td align="left" balign="left"> + setFont(font : Font) </td></tr>
<tr><td align="left" balign="left"> + getTranslateX() : int </td></tr>
<tr><td align="left" balign="left"> + getTranslateY() : int </td></tr>
<tr><td align="left" balign="left"> + setColor(color : int) </td></tr>
<tr><td align="left" balign="left"> + setColor(i : int, i1 : int, i2 : int) </td></tr>
<tr><td align="left" balign="left"> + setPixel(i : int, i1 : int, i2 : int) </td></tr>
<tr><td align="left" balign="left"> + getPixel(i : int, i1 : int) : int </td></tr>
<tr><td align="left" balign="left"> + drawString(s : String, i : int, i1 : int, i2 : int, b : boolean) </td></tr>
<tr><td align="left" balign="left"> + drawString(s : String, i : int, i1 : int, i2 : int) </td></tr>
<tr><td align="left" balign="left"> + drawSubstring(s : String, i : int, i1 : int, i2 : int, i3 : int, i4 : int) </td></tr>
<tr><td align="left" balign="left"> + drawChar(c : char, i : int, i1 : int, i2 : int) </td></tr>
<tr><td align="left" balign="left"> + drawChars(chars : char[], i : int, i1 : int, i2 : int, i3 : int, i4 : int) </td></tr>
<tr><td align="left" balign="left"> + getStrokeStyle() : int </td></tr>
<tr><td align="left" balign="left"> + setStrokeStyle(i : int) </td></tr>
<tr><td align="left" balign="left"> + drawRegionRop(image : Image, i : int, i1 : int, i2 : int, i3 : int, i4 : int, i5 : int, i6 : int, i7 : int) </td></tr>
<tr><td align="left" balign="left"> + drawRegionRop(image : Image, i : int, i1 : int, i2 : int, i3 : int, i4 : int, i5 : int, i6 : int, i7 : int, i8 : int) </td></tr>
<tr><td align="left" balign="left"> + drawRegion(image : Image, i : int, i1 : int, i2 : int, i3 : int, i4 : int, i5 : int, i6 : int, i7 : int) </td></tr>
<tr><td align="left" balign="left"> + drawImage(image : Image, i : int, i1 : int, i2 : int) </td></tr>
<tr><td align="left" balign="left"> + drawLine(x1 : int, y1 : int, x2 : int, y2 : int) </td></tr>
<tr><td align="left" balign="left"> + fillRect(x : int, y : int, width : int, height : int) </td></tr>
<tr><td align="left" balign="left"> + copyArea(i : int, i1 : int, i2 : int, i3 : int, i4 : int, i5 : int, i6 : int) </td></tr>
<tr><td align="left" balign="left"> + drawRoundRect(x : int, y : int, width : int, height : int, arcWidth : int, arcHeight : int) </td></tr>
<tr><td align="left" balign="left"> + drawRect(x : int, y : int, width : int, height : int) </td></tr>
<tr><td align="left" balign="left"> + drawArc(x : int, y : int, width : int, height : int, startAngle : int, arcAngle : int) </td></tr>
<tr><td align="left" balign="left"> + fillArc(x : int, y : int, width : int, height : int, startAngle : int, arcAngle : int) </td></tr>
<tr><td align="left" balign="left"> + refresh() </td></tr>
<tr><td align="left" balign="left"> + clear() </td></tr>
<tr><td align="left" balign="left"> + getWidth() : int </td></tr>
<tr><td align="left" balign="left"> + getHeight() : int </td></tr>
<tr><td align="left" balign="left"> + getDisplay() : byte[] </td></tr>
<tr><td align="left" balign="left"> + getHWDisplay() : byte[] </td></tr>
<tr><td align="left" balign="left"> + setContrast(i : int) </td></tr>
<tr><td align="left" balign="left"> + bitBlt(bytes : byte[], i : int, i1 : int, i2 : int, i3 : int, i4 : int, i5 : int, i6 : int, i7 : int, i8 : int) </td></tr>
<tr><td align="left" balign="left"> + bitBlt(bytes : byte[], i : int, i1 : int, i2 : int, i3 : int, bytes1 : byte[], i4 : int, i5 : int, i6 : int, i7 : int, i8 : int, i9 : int, i10 : int) </td></tr>
<tr><td align="left" balign="left"> + setAutoRefresh(b : boolean) </td></tr>
<tr><td align="left" balign="left"> + setAutoRefreshPeriod(i : int) : int </td></tr>
		</table></td></tr>
		</table>>, URL="./LCD.html", fontname="Helvetica", fontcolor="black", fontsize=9.0];
	// ev3dev.hardware.EV3DevDevice
	c2094 [label=<<table title="ev3dev.hardware.EV3DevDevice" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="../hardware/EV3DevDevice.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"><font face="Helvetica-Oblique"> EV3DevDevice </font></td></tr>
<tr><td align="center" balign="center"><font point-size="7.0"> ev3dev.hardware </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - log : Logger </td></tr>
<tr><td align="left" balign="left"> # LEGO_PORT : java.lang.String </td></tr>
<tr><td align="left" balign="left"> # ADDRESS : java.lang.String </td></tr>
<tr><td align="left" balign="left"> # LEGO_SENSOR : java.lang.String </td></tr>
<tr><td align="left" balign="left"> # MODE : java.lang.String </td></tr>
<tr><td align="left" balign="left"> # DEVICE : java.lang.String </td></tr>
<tr><td align="left" balign="left"> # PATH_DEVICE : java.io.File </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + EV3DevDevice() </td></tr>
<tr><td align="left" balign="left"> # detect(type : java.lang.String, portName : java.lang.String) </td></tr>
<tr><td align="left" balign="left"> # getStringAttribute(attribute : java.lang.String) : java.lang.String </td></tr>
<tr><td align="left" balign="left"> # getIntegerAttribute(attribute : java.lang.String) : int </td></tr>
<tr><td align="left" balign="left"> # setStringAttribute(attribute : java.lang.String, value : java.lang.String) </td></tr>
<tr><td align="left" balign="left"> # setIntegerAttribute(attribute : java.lang.String, value : int) </td></tr>
		</table></td></tr>
		</table>>, URL="../hardware/EV3DevDevice.html", fontname="Helvetica", fontcolor="black", fontsize=9.0];
	//ev3dev.actuators.LCD extends ev3dev.hardware.EV3DevDevice
	c2094:p -> c2084:p [dir=back,arrowtail=empty];
}

