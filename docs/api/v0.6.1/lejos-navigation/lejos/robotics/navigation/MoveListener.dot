#!/usr/local/bin/dot
#
# Class diagram 
# Generated by UMLGraph version R5_6-24-gf6e263 (http://www.umlgraph.org/)
#

digraph G {
	edge [fontname="Helvetica",fontsize=10,labelfontname="Helvetica",labelfontsize=10];
	node [fontname="Helvetica",fontsize=10,shape=plaintext];
	nodesep=0.25;
	ranksep=0.5;
	// lejos.robotics.localization.BeaconPoseProvider
	c2395 [label=<<table title="lejos.robotics.localization.BeaconPoseProvider" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="../localization/BeaconPoseProvider.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> BeaconPoseProvider </td></tr>
<tr><td align="center" balign="center"><font point-size="7.0"> lejos.robotics.localization </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - bt : lejos.robotics.localization.BeaconTriangle </td></tr>
<tr><td align="left" balign="left"> - bl : lejos.robotics.localization.BeaconLocator </td></tr>
<tr><td align="left" balign="left"> - opp : lejos.robotics.localization.OdometryPoseProvider </td></tr>
<tr><td align="left" balign="left"> - moves : int </td></tr>
<tr><td align="left" balign="left"> - scanInterval : int </td></tr>
<tr><td align="left" balign="left"> - distance : double </td></tr>
<tr><td align="left" balign="left"> - hasScanned : boolean </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + BeaconPoseProvider(bl : lejos.robotics.localization.BeaconLocator, bt : lejos.robotics.localization.BeaconTriangle, mp : lejos.robotics.navigation.MoveProvider) </td></tr>
<tr><td align="left" balign="left"> + BeaconPoseProvider(bl : lejos.robotics.localization.BeaconLocator, bt : lejos.robotics.localization.BeaconTriangle, mp : lejos.robotics.navigation.MoveProvider, scanInterval : int) </td></tr>
<tr><td align="left" balign="left"> - convertToRelative(robotBearing : double, cartesianHeading : double) : double </td></tr>
<tr><td align="left" balign="left"> + getPose() : lejos.robotics.navigation.Pose </td></tr>
<tr><td align="left" balign="left"> - sortBeacons(beacons : java.util.ArrayList&lt;java.lang.Double&gt;, angles : java.util.ArrayList&lt;java.lang.Double&gt;) : boolean </td></tr>
<tr><td align="left" balign="left"> + getLargestIndex(angles : java.util.ArrayList&lt;java.lang.Double&gt;) : int </td></tr>
<tr><td align="left" balign="left"> - betweenAngles(greater : double, lesser : double) : double </td></tr>
<tr><td align="left" balign="left"> + setPose(aPose : lejos.robotics.navigation.Pose) </td></tr>
<tr><td align="left" balign="left"> + moveStarted(move : lejos.robotics.navigation.Move, mp : lejos.robotics.navigation.MoveProvider) </td></tr>
<tr><td align="left" balign="left"> + moveStopped(move : lejos.robotics.navigation.Move, mp : lejos.robotics.navigation.MoveProvider) </td></tr>
		</table></td></tr>
		</table>>, URL="../localization/BeaconPoseProvider.html", fontname="Helvetica", fontcolor="black", fontsize=9.0];
	// lejos.robotics.localization.MCLPoseProvider
	c2400 [label=<<table title="lejos.robotics.localization.MCLPoseProvider" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="../localization/MCLPoseProvider.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> MCLPoseProvider </td></tr>
<tr><td align="center" balign="center"><font point-size="7.0"> lejos.robotics.localization </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - particles : lejos.robotics.localization.MCLParticleSet </td></tr>
<tr><td align="left" balign="left"> - scanner : RangeScanner </td></tr>
<tr><td align="left" balign="left"> - map : lejos.robotics.mapping.RangeMap </td></tr>
<tr><td align="left" balign="left"> - numParticles : int </td></tr>
<tr><td align="left" balign="left"> - _x : float </td></tr>
<tr><td align="left" balign="left"> - _y : float </td></tr>
<tr><td align="left" balign="left"> - _heading : float </td></tr>
<tr><td align="left" balign="left"> - minX : float </td></tr>
<tr><td align="left" balign="left"> - maxX : float </td></tr>
<tr><td align="left" balign="left"> - minY : float </td></tr>
<tr><td align="left" balign="left"> - maxY : float </td></tr>
<tr><td align="left" balign="left"> - varX : double </td></tr>
<tr><td align="left" balign="left"> - varY : double </td></tr>
<tr><td align="left" balign="left"> - varH : double </td></tr>
<tr><td align="left" balign="left"> - updated : boolean </td></tr>
<tr><td align="left" balign="left"> - updater : lejos.robotics.localization.MCLPoseProvider.Updater </td></tr>
<tr><td align="left" balign="left"> - border : int </td></tr>
<tr><td align="left" balign="left"> - debug : boolean </td></tr>
<tr><td align="left" balign="left"> - busy : boolean </td></tr>
<tr><td align="left" balign="left"> - BIG_FLOAT : float </td></tr>
<tr><td align="left" balign="left"> - readings : RangeReadings </td></tr>
<tr><td align="left" balign="left"> - lost : boolean </td></tr>
<tr><td align="left" balign="left"> - incomplete : boolean </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + MCLPoseProvider(mp : lejos.robotics.navigation.MoveProvider, scanner : RangeScanner, map : lejos.robotics.mapping.RangeMap, numParticles : int, border : int) </td></tr>
<tr><td align="left" balign="left"> + MCLPoseProvider(map : lejos.robotics.mapping.RangeMap, numParticles : int, border : int) </td></tr>
<tr><td align="left" balign="left"> + setMap(map : lejos.robotics.mapping.RangeMap) </td></tr>
<tr><td align="left" balign="left"> + setInitialPose(aPose : lejos.robotics.navigation.Pose, radiusNoise : float, headingNoise : float) </td></tr>
<tr><td align="left" balign="left"> + setInitialPose(readings : RangeReadings, sigma : float) </td></tr>
<tr><td align="left" balign="left"> + setDebug(on : boolean) </td></tr>
<tr><td align="left" balign="left"> + setPose(aPose : lejos.robotics.navigation.Pose) </td></tr>
<tr><td align="left" balign="left"> + getParticles() : lejos.robotics.localization.MCLParticleSet </td></tr>
<tr><td align="left" balign="left"> + getReadings() : RangeReadings </td></tr>
<tr><td align="left" balign="left"> + setParticles(particles : lejos.robotics.localization.MCLParticleSet) </td></tr>
<tr><td align="left" balign="left"> + generateParticles() </td></tr>
<tr><td align="left" balign="left"> + moveStarted(event : lejos.robotics.navigation.Move, mp : lejos.robotics.navigation.MoveProvider) </td></tr>
<tr><td align="left" balign="left"> + moveStopped(event : lejos.robotics.navigation.Move, mp : lejos.robotics.navigation.MoveProvider) </td></tr>
<tr><td align="left" balign="left"> + update() : boolean </td></tr>
<tr><td align="left" balign="left"> + update(readings : RangeReadings) : boolean </td></tr>
<tr><td align="left" balign="left"> + isUpdated() : boolean </td></tr>
<tr><td align="left" balign="left"> + isLost() : boolean </td></tr>
<tr><td align="left" balign="left"> + incompleteRanges() : boolean </td></tr>
<tr><td align="left" balign="left"> + getXRange() : float </td></tr>
<tr><td align="left" balign="left"> + getYRange() : float </td></tr>
<tr><td align="left" balign="left"> + getPose() : lejos.robotics.navigation.Pose </td></tr>
<tr><td align="left" balign="left"> + getEstimatedPose() : lejos.robotics.navigation.Pose </td></tr>
<tr><td align="left" balign="left"> + estimatePose() </td></tr>
<tr><td align="left" balign="left"> + getRangeReadings() : RangeReadings </td></tr>
<tr><td align="left" balign="left"> + getErrorRect() : Rectangle2D </td></tr>
<tr><td align="left" balign="left"> + getMaxX() : float </td></tr>
<tr><td align="left" balign="left"> + getMinX() : float </td></tr>
<tr><td align="left" balign="left"> + getMaxY() : float </td></tr>
<tr><td align="left" balign="left"> + getMinY() : float </td></tr>
<tr><td align="left" balign="left"> + getSigmaX() : float </td></tr>
<tr><td align="left" balign="left"> + getSigmaY() : float </td></tr>
<tr><td align="left" balign="left"> + getSigmaHeading() : float </td></tr>
<tr><td align="left" balign="left"> + getScanner() : RangeScanner </td></tr>
<tr><td align="left" balign="left"> + dumpObject(dos : java.io.DataOutputStream) </td></tr>
<tr><td align="left" balign="left"> + loadObject(dis : java.io.DataInputStream) </td></tr>
<tr><td align="left" balign="left"> + isBusy() : boolean </td></tr>
		</table></td></tr>
		</table>>, URL="../localization/MCLPoseProvider.html", fontname="Helvetica", fontcolor="black", fontsize=9.0];
	// lejos.robotics.localization.OdometryPoseProvider
	c2402 [label=<<table title="lejos.robotics.localization.OdometryPoseProvider" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="../localization/OdometryPoseProvider.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> OdometryPoseProvider </td></tr>
<tr><td align="center" balign="center"><font point-size="7.0"> lejos.robotics.localization </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - x : float </td></tr>
<tr><td align="left" balign="left"> - y : float </td></tr>
<tr><td align="left" balign="left"> - heading : float </td></tr>
<tr><td align="left" balign="left"> - angle0 : float </td></tr>
<tr><td align="left" balign="left"> - distance0 : float </td></tr>
<tr><td align="left" balign="left"> ~ mp : lejos.robotics.navigation.MoveProvider </td></tr>
<tr><td align="left" balign="left"> ~ current : boolean </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + OdometryPoseProvider(mp : lejos.robotics.navigation.MoveProvider) </td></tr>
<tr><td align="left" balign="left"> + getPose() : lejos.robotics.navigation.Pose </td></tr>
<tr><td align="left" balign="left"> + moveStarted(move : lejos.robotics.navigation.Move, mp : lejos.robotics.navigation.MoveProvider) </td></tr>
<tr><td align="left" balign="left"> + setPose(aPose : lejos.robotics.navigation.Pose) </td></tr>
<tr><td align="left" balign="left"> + moveStopped(move : lejos.robotics.navigation.Move, mp : lejos.robotics.navigation.MoveProvider) </td></tr>
<tr><td align="left" balign="left"> - updatePose(event : lejos.robotics.navigation.Move) </td></tr>
<tr><td align="left" balign="left"> - normalize(angle : float) : float </td></tr>
<tr><td align="left" balign="left"> - setPosition(p : Point) </td></tr>
<tr><td align="left" balign="left"> - setHeading(heading : float) </td></tr>
<tr><td align="left" balign="left"> + sampleSize() : int </td></tr>
<tr><td align="left" balign="left"> + fetchSample(sample : float[], offset : int) </td></tr>
		</table></td></tr>
		</table>>, URL="../localization/OdometryPoseProvider.html", fontname="Helvetica", fontcolor="black", fontsize=9.0];
	// lejos.robotics.navigation.DifferentialPilot
	c2415 [label=<<table title="lejos.robotics.navigation.DifferentialPilot" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./DifferentialPilot.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> DifferentialPilot </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - _turnRadius : float </td></tr>
<tr><td align="left" balign="left"> # _left : RegulatedMotor </td></tr>
<tr><td align="left" balign="left"> # _right : RegulatedMotor </td></tr>
<tr><td align="left" balign="left"> - _inside : RegulatedMotor </td></tr>
<tr><td align="left" balign="left"> # _outside : RegulatedMotor </td></tr>
<tr><td align="left" balign="left"> - _steerRatio : float </td></tr>
<tr><td align="left" balign="left"> # _leftDegPerDistance : float </td></tr>
<tr><td align="left" balign="left"> # _rightDegPerDistance : float </td></tr>
<tr><td align="left" balign="left"> - _leftTurnRatio : float </td></tr>
<tr><td align="left" balign="left"> - _rightTurnRatio : float </td></tr>
<tr><td align="left" balign="left"> - _robotTravelSpeed : float </td></tr>
<tr><td align="left" balign="left"> - _robotRotateSpeed : float </td></tr>
<tr><td align="left" balign="left"> - _parity : byte </td></tr>
<tr><td align="left" balign="left"> - _trackWidth : float </td></tr>
<tr><td align="left" balign="left"> - _leftWheelDiameter : float </td></tr>
<tr><td align="left" balign="left"> - _rightWheelDiameter : float </td></tr>
<tr><td align="left" balign="left"> - _leftTC : int </td></tr>
<tr><td align="left" balign="left"> - _rightTC : int </td></tr>
<tr><td align="left" balign="left"> - _listeners : ArrayList&lt;MoveListener&gt; </td></tr>
<tr><td align="left" balign="left"> # _type : Move.MoveType </td></tr>
<tr><td align="left" balign="left"> - _distance : double </td></tr>
<tr><td align="left" balign="left"> - _angle : double </td></tr>
<tr><td align="left" balign="left"> - _acceleration : int </td></tr>
<tr><td align="left" balign="left"> - _quickAcceleration : int </td></tr>
<tr><td align="left" balign="left"> - _leftDirection : byte </td></tr>
<tr><td align="left" balign="left"> - _rightDirection : byte </td></tr>
<tr><td align="left" balign="left"> - _monitor : DifferentialPilot.Monitor </td></tr>
<tr><td align="left" balign="left"> - _moveActive : boolean </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + DifferentialPilot(wheelDiameter : double, trackWidth : double, leftMotor : RegulatedMotor, rightMotor : RegulatedMotor) </td></tr>
<tr><td align="left" balign="left"> + DifferentialPilot(wheelDiameter : double, trackWidth : double, leftMotor : RegulatedMotor, rightMotor : RegulatedMotor, reverse : boolean) </td></tr>
<tr><td align="left" balign="left"> + DifferentialPilot(leftWheelDiameter : double, rightWheelDiameter : double, trackWidth : double, leftMotor : RegulatedMotor, rightMotor : RegulatedMotor, reverse : boolean) </td></tr>
<tr><td align="left" balign="left"> - getLeftCount() : int </td></tr>
<tr><td align="left" balign="left"> - getRightCount() : int </td></tr>
<tr><td align="left" balign="left"> - setSpeed(leftSpeed : int, rightSpeed : int) </td></tr>
<tr><td align="left" balign="left"> + setLinearSpeed(travelSpeed : double) </td></tr>
<tr><td align="left" balign="left"> + getLinearSpeed() : double </td></tr>
<tr><td align="left" balign="left"> + setLinearAcceleration(acceleration : double) </td></tr>
<tr><td align="left" balign="left"> + getLinearAcceleration() : double </td></tr>
<tr><td align="left" balign="left"> - setMotorAccel(acceleration : int) </td></tr>
<tr><td align="left" balign="left"> + getMaxLinearSpeed() : double </td></tr>
<tr><td align="left" balign="left"> + setAngularSpeed(rotateSpeed : double) </td></tr>
<tr><td align="left" balign="left"> + getAngularSpeed() : double </td></tr>
<tr><td align="left" balign="left"> + getMaxRotateSpeed() : float </td></tr>
<tr><td align="left" balign="left"> + getMaxAngularSpeed() : double </td></tr>
<tr><td align="left" balign="left"> + forward() </td></tr>
<tr><td align="left" balign="left"> + backward() </td></tr>
<tr><td align="left" balign="left"> - bak() </td></tr>
<tr><td align="left" balign="left"> - fwd() </td></tr>
<tr><td align="left" balign="left"> + rotateLeft() </td></tr>
<tr><td align="left" balign="left"> + rotateRight() </td></tr>
<tr><td align="left" balign="left"> + rotate(angle : double) </td></tr>
<tr><td align="left" balign="left"> + rotate(angle : double, immediateReturn : boolean) </td></tr>
<tr><td align="left" balign="left"> + stop() </td></tr>
<tr><td align="left" balign="left"> + quickStop() </td></tr>
<tr><td align="left" balign="left"> + travel(distance : double) </td></tr>
<tr><td align="left" balign="left"> + travel(distance : double, immediateReturn : boolean) </td></tr>
<tr><td align="left" balign="left"> + arcForward(radius : double) </td></tr>
<tr><td align="left" balign="left"> + arcBackward(radius : double) </td></tr>
<tr><td align="left" balign="left"> + arc(radius : double, angle : double) </td></tr>
<tr><td align="left" balign="left"> + arc(radius : double, angle : double, immediateReturn : boolean) </td></tr>
<tr><td align="left" balign="left"> + travelArc(radius : double, distance : double) </td></tr>
<tr><td align="left" balign="left"> + travelArc(radius : double, distance : double, immediateReturn : boolean) </td></tr>
<tr><td align="left" balign="left"> - turnRate(radius : double) : double </td></tr>
<tr><td align="left" balign="left"> - radius(turnRate : double) : double </td></tr>
<tr><td align="left" balign="left"> + steer(turnRate : double) </td></tr>
<tr><td align="left" balign="left"> + steerBackward(turnRate : double) </td></tr>
<tr><td align="left" balign="left"> + steer(turnRate : double, angle : double) </td></tr>
<tr><td align="left" balign="left"> + steer(turnRate : double, angle : double, immediateReturn : boolean) </td></tr>
<tr><td align="left" balign="left"> ~ steerPrep(turnRate : double) </td></tr>
<tr><td align="left" balign="left"> # movementStart() </td></tr>
<tr><td align="left" balign="left"> # movementActive() </td></tr>
<tr><td align="left" balign="left"> - movementStop() </td></tr>
<tr><td align="left" balign="left"> + isMoving() : boolean </td></tr>
<tr><td align="left" balign="left"> - waitComplete() </td></tr>
<tr><td align="left" balign="left"> - waitForActiveMove() </td></tr>
<tr><td align="left" balign="left"> + isStalled() : boolean </td></tr>
<tr><td align="left" balign="left"> + reset() </td></tr>
<tr><td align="left" balign="left"> + setMinRadius(radius : double) </td></tr>
<tr><td align="left" balign="left"> + getMinRadius() : double </td></tr>
<tr><td align="left" balign="left"> + getMovementIncrement() : float </td></tr>
<tr><td align="left" balign="left"> + getAngleIncrement() : float </td></tr>
<tr><td align="left" balign="left"> + addMoveListener(m : MoveListener) </td></tr>
<tr><td align="left" balign="left"> + getMovement() : Move </td></tr>
<tr><td align="left" balign="left"> + getTurnRate() : double </td></tr>
<tr><td align="left" balign="left"> + setAngularAcceleration(acceleration : double) </td></tr>
<tr><td align="left" balign="left"> + getAngularAcceleration() : double </td></tr>
		</table></td></tr>
		</table>>, URL="./DifferentialPilot.html", fontname="Helvetica", fontcolor="black", fontsize=9.0];
	// lejos.robotics.navigation.MoveListener
	c2421 [label=<<table title="lejos.robotics.navigation.MoveListener" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" bgcolor="lemonChiffon" href="./MoveListener.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> &#171;interface&#187; </td></tr>
<tr><td align="center" balign="center"> MoveListener </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="9.0"> + moveStarted(event : Move, mp : MoveProvider) </font></td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="9.0"> + moveStopped(event : Move, mp : MoveProvider) </font></td></tr>
		</table></td></tr>
		</table>>, URL="./MoveListener.html", fontname="Helvetica", fontcolor="black", fontsize=9.0];
	//lejos.robotics.localization.BeaconPoseProvider implements lejos.robotics.navigation.MoveListener
	c2421:p -> c2395:p [dir=back,arrowtail=empty,style=dashed];
	//lejos.robotics.localization.MCLPoseProvider implements lejos.robotics.navigation.MoveListener
	c2421:p -> c2400:p [dir=back,arrowtail=empty,style=dashed];
	//lejos.robotics.localization.OdometryPoseProvider implements lejos.robotics.navigation.MoveListener
	c2421:p -> c2402:p [dir=back,arrowtail=empty,style=dashed];
	// lejos.robotics.localization.BeaconPoseProvider NAVASSOC lejos.robotics.localization.OdometryPoseProvider
	c2395:p -> c2402:p [taillabel="", label="", headlabel="", fontname="Helvetica", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// lejos.robotics.navigation.DifferentialPilot NAVASSOC lejos.robotics.navigation.MoveListener
	c2415:p -> c2421:p [taillabel="", label="", headlabel="*", fontname="Helvetica", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
}

