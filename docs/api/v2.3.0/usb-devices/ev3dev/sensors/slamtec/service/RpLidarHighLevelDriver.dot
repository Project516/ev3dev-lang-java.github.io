#!/usr/local/bin/dot
#
# Class diagram 
# Generated by UMLGraph version R5_6-24-gf6e263 (http://www.umlgraph.org/)
#

digraph G {
	edge [fontname="Helvetica",fontsize=10,labelfontname="Helvetica",labelfontsize=10];
	node [fontname="Helvetica",fontsize=10,shape=plaintext];
	nodesep=0.25;
	ranksep=0.5;
	// ev3dev.sensors.slamtec.RPLidarA1Driver2
	c1186 [label=<<table title="ev3dev.sensors.slamtec.RPLidarA1Driver2" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="../RPLidarA1Driver2.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> RPLidarA1Driver2 </td></tr>
<tr><td align="center" balign="center"><font point-size="7.0"> ev3dev.sensors.slamtec </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - initSuccess : boolean </td></tr>
<tr><td align="left" balign="left"> - closingStatus : java.util.concurrent.atomic.AtomicBoolean </td></tr>
<tr><td align="left" balign="left"> - driver : ev3dev.sensors.slamtec.service.RpLidarHighLevelDriver </td></tr>
<tr><td align="left" balign="left"> - USBPort : java.lang.String </td></tr>
<tr><td align="left" balign="left"> - counter : int </td></tr>
<tr><td align="left" balign="left"> - flag : boolean </td></tr>
<tr><td align="left" balign="left"> - distancesTemp : java.util.List&lt;ev3dev.sensors.slamtec.model.ScanDistance&gt; </td></tr>
<tr><td align="left" balign="left"> - scan : ev3dev.sensors.slamtec.model.Scan </td></tr>
<tr><td align="left" balign="left"> - listenerList : java.util.List&lt;ev3dev.sensors.slamtec.RPLidarProviderListener&gt; </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + RPLidarA1Driver2(USBPort : java.lang.String) </td></tr>
<tr><td align="left" balign="left"> + init() </td></tr>
<tr><td align="left" balign="left"> - setPortProperty() </td></tr>
<tr><td align="left" balign="left"> + scan() : ev3dev.sensors.slamtec.model.Scan </td></tr>
<tr><td align="left" balign="left"> + close() </td></tr>
<tr><td align="left" balign="left"> + addListener(listener : ev3dev.sensors.slamtec.RPLidarProviderListener) </td></tr>
<tr><td align="left" balign="left"> + removeListener(listener : ev3dev.sensors.slamtec.RPLidarProviderListener) </td></tr>
		</table></td></tr>
		</table>>, URL="../RPLidarA1Driver2.html", fontname="Helvetica", fontcolor="black", fontsize=9.0];
	// ev3dev.sensors.slamtec.service.RpLidarHighLevelDriver
	c1198 [label=<<table title="ev3dev.sensors.slamtec.service.RpLidarHighLevelDriver" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" bgcolor="lemonChiffon" href="./RpLidarHighLevelDriver.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> RpLidarHighLevelDriver </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> ~ work : RpLidarScan </td></tr>
<tr><td align="left" balign="left"> ~ complete : RpLidarScan </td></tr>
<tr><td align="left" balign="left"> ~ ready : boolean </td></tr>
<tr><td align="left" balign="left"> ~ driver : RpLidarLowLevelDriver </td></tr>
<tr><td align="left" balign="left"> ~ expectedCount : int </td></tr>
<tr><td align="left" balign="left"> ~ initialized : boolean </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + RpLidarHighLevelDriver() </td></tr>
<tr><td align="left" balign="left"> + initialize(device : String, totalCollect : int) : boolean </td></tr>
<tr><td align="left" balign="left"> - autoSetCollectionToScan() : boolean </td></tr>
<tr><td align="left" balign="left"> + stop() </td></tr>
<tr><td align="left" balign="left"> + blockCollectScan(scan : RpLidarScan, timeout : long) : boolean </td></tr>
<tr><td align="left" balign="left"> + handleMeasurement(measurement : RpLidarMeasurement) </td></tr>
<tr><td align="left" balign="left"> + handleDeviceHealth(health : RpLidarHeath) </td></tr>
<tr><td align="left" balign="left"> + handleDeviceInfo(info : RpLidarDeviceInfo) </td></tr>
<tr><td align="left" balign="left"> + isInitialized() : boolean </td></tr>
		</table></td></tr>
		</table>>, URL="./RpLidarHighLevelDriver.html", fontname="Helvetica", fontcolor="black", fontsize=9.0];
	// ev3dev.sensors.slamtec.service.RpLidarListener
	c1199 [label=<<table title="ev3dev.sensors.slamtec.service.RpLidarListener" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./RpLidarListener.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> &#171;interface&#187; </td></tr>
<tr><td align="center" balign="center"> RpLidarListener </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="9.0"> + handleMeasurement(measurement : RpLidarMeasurement) </font></td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="9.0"> + handleDeviceHealth(health : RpLidarHeath) </font></td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="9.0"> + handleDeviceInfo(info : RpLidarDeviceInfo) </font></td></tr>
		</table></td></tr>
		</table>>, URL="./RpLidarListener.html", fontname="Helvetica", fontcolor="black", fontsize=9.0];
	// ev3dev.sensors.slamtec.service.RpLidarLowLevelDriver
	c1200 [label=<<table title="ev3dev.sensors.slamtec.service.RpLidarLowLevelDriver" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./RpLidarLowLevelDriver.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> RpLidarLowLevelDriver </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + SYNC_BYTE0 : byte </td></tr>
<tr><td align="left" balign="left"> + SYNC_BYTE1 : byte </td></tr>
<tr><td align="left" balign="left"> + STOP : byte </td></tr>
<tr><td align="left" balign="left"> + RESET : byte </td></tr>
<tr><td align="left" balign="left"> + SCAN : byte </td></tr>
<tr><td align="left" balign="left"> + FORCE_SCAN : byte </td></tr>
<tr><td align="left" balign="left"> + GET_INFO : byte </td></tr>
<tr><td align="left" balign="left"> + GET_HEALTH : byte </td></tr>
<tr><td align="left" balign="left"> + RCV_INFO : byte </td></tr>
<tr><td align="left" balign="left"> + RCV_HEALTH : byte </td></tr>
<tr><td align="left" balign="left"> + RCV_SCAN : byte </td></tr>
<tr><td align="left" balign="left"> - START_MOTOR : byte </td></tr>
<tr><td align="left" balign="left"> ~ serialPort : SerialPort </td></tr>
<tr><td align="left" balign="left"> ~ in : InputStream </td></tr>
<tr><td align="left" balign="left"> ~ out : OutputStream </td></tr>
<tr><td align="left" balign="left"> ~ dataOut : byte[] </td></tr>
<tr><td align="left" balign="left"> ~ verbose : boolean </td></tr>
<tr><td align="left" balign="left"> - readThread : RpLidarLowLevelDriver.ReadSerialThread </td></tr>
<tr><td align="left" balign="left"> ~ health : RpLidarHeath </td></tr>
<tr><td align="left" balign="left"> ~ deviceInfo : RpLidarDeviceInfo </td></tr>
<tr><td align="left" balign="left"> ~ measurement : RpLidarMeasurement </td></tr>
<tr><td align="left" balign="left"> ~ listener : RpLidarListener </td></tr>
<tr><td align="left" balign="left"> ~ scanning : boolean </td></tr>
<tr><td align="left" balign="left"> ~ lastReceived : int </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + RpLidarLowLevelDriver(portName : String, listener : RpLidarListener) </td></tr>
<tr><td align="left" balign="left"> + pause(milli : long) </td></tr>
<tr><td align="left" balign="left"> + shutdown() </td></tr>
<tr><td align="left" balign="left"> + sendScan(timeout : long) : boolean </td></tr>
<tr><td align="left" balign="left"> + sendStop() </td></tr>
<tr><td align="left" balign="left"> + sendReset() </td></tr>
<tr><td align="left" balign="left"> + sendGetInfo(timeout : long) : boolean </td></tr>
<tr><td align="left" balign="left"> + sendGetHealth(timeout : long) : boolean </td></tr>
<tr><td align="left" balign="left"> # sendBlocking(command : byte, expected : byte, timeout : long) : boolean </td></tr>
<tr><td align="left" balign="left"> # sendNoPayLoad(command : byte) </td></tr>
<tr><td align="left" balign="left"> # sendPayLoad(command : byte, payLoad : byte[]) </td></tr>
<tr><td align="left" balign="left"> # sendPayLoad(command : byte, payLoadInt : int) </td></tr>
<tr><td align="left" balign="left"> + sendStartMotor(speed : int) </td></tr>
<tr><td align="left" balign="left"> + sendStopMotor() </td></tr>
<tr><td align="left" balign="left"> # parseData(data : byte[], length : int) : int </td></tr>
<tr><td align="left" balign="left"> # parsePacket(data : byte[], offset : int, length : int, type : byte) : boolean </td></tr>
<tr><td align="left" balign="left"> # parseHealth(data : byte[], offset : int, length : int) : boolean </td></tr>
<tr><td align="left" balign="left"> # parseDeviceInfo(data : byte[], offset : int, length : int) : boolean </td></tr>
<tr><td align="left" balign="left"> # parseScan(data : byte[], offset : int, length : int) : boolean </td></tr>
<tr><td align="left" balign="left"> + setVerbose(verbose : boolean) </td></tr>
		</table></td></tr>
		</table>>, URL="./RpLidarLowLevelDriver.html", fontname="Helvetica", fontcolor="black", fontsize=9.0];
	// ev3dev.sensors.slamtec.service.RpLidarScan
	c1203 [label=<<table title="ev3dev.sensors.slamtec.service.RpLidarScan" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./RpLidarScan.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> RpLidarScan </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + N : int </td></tr>
<tr><td align="left" balign="left"> + quality : int[] </td></tr>
<tr><td align="left" balign="left"> + distance : int[] </td></tr>
<tr><td align="left" balign="left"> + time : long[] </td></tr>
<tr><td align="left" balign="left"> + used : GrowQueue_I32 </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + RpLidarScan() </td></tr>
<tr><td align="left" balign="left"> + set(scan : RpLidarScan) </td></tr>
<tr><td align="left" balign="left"> + convertMeters(meters : double[]) </td></tr>
<tr><td align="left" balign="left"> + convertMilliMeters(meters : double[]) </td></tr>
<tr><td align="left" balign="left"> + reset() </td></tr>
<tr><td align="left" balign="left"> + isInvalid(which : int) : boolean </td></tr>
		</table></td></tr>
		</table>>, URL="./RpLidarScan.html", fontname="Helvetica", fontcolor="black", fontsize=9.0];
	//ev3dev.sensors.slamtec.service.RpLidarHighLevelDriver implements ev3dev.sensors.slamtec.service.RpLidarListener
	c1199:p -> c1198:p [dir=back,arrowtail=empty,style=dashed];
	// ev3dev.sensors.slamtec.RPLidarA1Driver2 NAVASSOC ev3dev.sensors.slamtec.service.RpLidarHighLevelDriver
	c1186:p -> c1198:p [taillabel="", label="", headlabel="", fontname="Helvetica", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// ev3dev.sensors.slamtec.service.RpLidarHighLevelDriver NAVASSOC ev3dev.sensors.slamtec.service.RpLidarScan
	c1198:p -> c1203:p [taillabel="", label="", headlabel="", fontname="Helvetica", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// ev3dev.sensors.slamtec.service.RpLidarHighLevelDriver NAVASSOC ev3dev.sensors.slamtec.service.RpLidarScan
	c1198:p -> c1203:p [taillabel="", label="", headlabel="", fontname="Helvetica", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// ev3dev.sensors.slamtec.service.RpLidarHighLevelDriver NAVASSOC ev3dev.sensors.slamtec.service.RpLidarLowLevelDriver
	c1198:p -> c1200:p [taillabel="", label="", headlabel="", fontname="Helvetica", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// ev3dev.sensors.slamtec.service.RpLidarLowLevelDriver NAVASSOC ev3dev.sensors.slamtec.service.RpLidarListener
	c1200:p -> c1199:p [taillabel="", label="", headlabel="", fontname="Helvetica", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
}

