#!/usr/local/bin/dot
#
# Class diagram 
# Generated by UMLGraph version R5_6-24-gf6e263 (http://www.umlgraph.org/)
#

digraph G {
	edge [fontname="Helvetica",fontsize=10,labelfontname="Helvetica",labelfontsize=10];
	node [fontname="Helvetica",fontsize=10,shape=plaintext];
	nodesep=0.25;
	ranksep=0.5;
	// ev3dev.sensors.slamtec.RPLidarA1Driver
	c231 [label=<<table title="ev3dev.sensors.slamtec.RPLidarA1Driver" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="../RPLidarA1Driver.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> RPLidarA1Driver </td></tr>
<tr><td align="center" balign="center"><font point-size="7.0"> ev3dev.sensors.slamtec </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - closingStatus : boolean </td></tr>
<tr><td align="left" balign="left"> - driver : ev3dev.sensors.slamtec.service.RpLidarLowLevelDriver </td></tr>
<tr><td align="left" balign="left"> - USBPort : java.lang.String </td></tr>
<tr><td align="left" balign="left"> - distancesTemp : java.util.List&lt;ev3dev.sensors.slamtec.model.ScanDistance&gt; </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + RPLidarA1Driver(USBPort : java.lang.String) </td></tr>
<tr><td align="left" balign="left"> + init() </td></tr>
<tr><td align="left" balign="left"> + scan() : ev3dev.sensors.slamtec.model.Scan </td></tr>
<tr><td align="left" balign="left"> + close() </td></tr>
<tr><td align="left" balign="left"> + handleMeasurement(measurement : ev3dev.sensors.slamtec.service.RpLidarMeasurement) </td></tr>
<tr><td align="left" balign="left"> + containAngle(list : java.util.List&lt;ev3dev.sensors.slamtec.model.ScanDistance&gt;, angle : int) : boolean </td></tr>
<tr><td align="left" balign="left"> + handleDeviceHealth(health : ev3dev.sensors.slamtec.service.RpLidarHeath) </td></tr>
<tr><td align="left" balign="left"> + handleDeviceInfo(info : ev3dev.sensors.slamtec.service.RpLidarDeviceInfo) </td></tr>
		</table></td></tr>
		</table>>, URL="../RPLidarA1Driver.html", fontname="Helvetica", fontcolor="black", fontsize=9.0];
	// ev3dev.sensors.slamtec.service.RpLidarDeviceInfo
	c239 [label=<<table title="ev3dev.sensors.slamtec.service.RpLidarDeviceInfo" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./RpLidarDeviceInfo.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> RpLidarDeviceInfo </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + model : int </td></tr>
<tr><td align="left" balign="left"> + firmware_minor : int </td></tr>
<tr><td align="left" balign="left"> + firmware_major : int </td></tr>
<tr><td align="left" balign="left"> + hardware : int </td></tr>
<tr><td align="left" balign="left"> + serialNumber : byte[] </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + RpLidarDeviceInfo() </td></tr>
<tr><td align="left" balign="left"> + print() </td></tr>
		</table></td></tr>
		</table>>, URL="./RpLidarDeviceInfo.html", fontname="Helvetica", fontcolor="black", fontsize=9.0];
	// ev3dev.sensors.slamtec.service.RpLidarHeath
	c240 [label=<<table title="ev3dev.sensors.slamtec.service.RpLidarHeath" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./RpLidarHeath.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> RpLidarHeath </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + status : int </td></tr>
<tr><td align="left" balign="left"> + error_code : int </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + RpLidarHeath() </td></tr>
<tr><td align="left" balign="left"> + print() </td></tr>
		</table></td></tr>
		</table>>, URL="./RpLidarHeath.html", fontname="Helvetica", fontcolor="black", fontsize=9.0];
	// ev3dev.sensors.slamtec.service.RpLidarListener
	c241 [label=<<table title="ev3dev.sensors.slamtec.service.RpLidarListener" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./RpLidarListener.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> &#171;interface&#187; </td></tr>
<tr><td align="center" balign="center"> RpLidarListener </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="9.0"> + handleMeasurement(measurement : RpLidarMeasurement) </font></td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="9.0"> + handleDeviceHealth(health : RpLidarHeath) </font></td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="9.0"> + handleDeviceInfo(info : RpLidarDeviceInfo) </font></td></tr>
		</table></td></tr>
		</table>>, URL="./RpLidarListener.html", fontname="Helvetica", fontcolor="black", fontsize=9.0];
	// ev3dev.sensors.slamtec.service.RpLidarLowLevelDriver
	c242 [label=<<table title="ev3dev.sensors.slamtec.service.RpLidarLowLevelDriver" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" bgcolor="lemonChiffon" href="./RpLidarLowLevelDriver.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> RpLidarLowLevelDriver </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + SYNC_BYTE0 : byte </td></tr>
<tr><td align="left" balign="left"> + SYNC_BYTE1 : byte </td></tr>
<tr><td align="left" balign="left"> + STOP : byte </td></tr>
<tr><td align="left" balign="left"> + RESET : byte </td></tr>
<tr><td align="left" balign="left"> + SCAN : byte </td></tr>
<tr><td align="left" balign="left"> + FORCE_SCAN : byte </td></tr>
<tr><td align="left" balign="left"> + GET_INFO : byte </td></tr>
<tr><td align="left" balign="left"> + GET_HEALTH : byte </td></tr>
<tr><td align="left" balign="left"> + RCV_INFO : byte </td></tr>
<tr><td align="left" balign="left"> + RCV_HEALTH : byte </td></tr>
<tr><td align="left" balign="left"> + RCV_SCAN : byte </td></tr>
<tr><td align="left" balign="left"> ~ serialPort : SerialPort </td></tr>
<tr><td align="left" balign="left"> ~ in : InputStream </td></tr>
<tr><td align="left" balign="left"> ~ out : OutputStream </td></tr>
<tr><td align="left" balign="left"> ~ dataOut : byte[] </td></tr>
<tr><td align="left" balign="left"> ~ verbose : boolean </td></tr>
<tr><td align="left" balign="left"> - readThread : RpLidarLowLevelDriver.ReadSerialThread </td></tr>
<tr><td align="left" balign="left"> ~ health : RpLidarHeath </td></tr>
<tr><td align="left" balign="left"> ~ deviceInfo : RpLidarDeviceInfo </td></tr>
<tr><td align="left" balign="left"> ~ measurement : RpLidarMeasurement </td></tr>
<tr><td align="left" balign="left"> ~ listener : RpLidarListener </td></tr>
<tr><td align="left" balign="left"> ~ scanning : boolean </td></tr>
<tr><td align="left" balign="left"> ~ lastReceived : int </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + RpLidarLowLevelDriver(portName : String, listener : RpLidarListener) </td></tr>
<tr><td align="left" balign="left"> + pause(milli : long) </td></tr>
<tr><td align="left" balign="left"> + shutdown() </td></tr>
<tr><td align="left" balign="left"> + sendScan(timeout : long) : boolean </td></tr>
<tr><td align="left" balign="left"> + sendStop() </td></tr>
<tr><td align="left" balign="left"> + sendReset() </td></tr>
<tr><td align="left" balign="left"> + sendGetInfo(timeout : long) : boolean </td></tr>
<tr><td align="left" balign="left"> + sendGetHealth(timeout : long) : boolean </td></tr>
<tr><td align="left" balign="left"> # sendBlocking(command : byte, expected : byte, timeout : long) : boolean </td></tr>
<tr><td align="left" balign="left"> # sendNoPayLoad(command : byte) </td></tr>
<tr><td align="left" balign="left"> # parseData(data : byte[], length : int) : int </td></tr>
<tr><td align="left" balign="left"> # parsePacket(data : byte[], offset : int, length : int, type : byte) : boolean </td></tr>
<tr><td align="left" balign="left"> # parseHealth(data : byte[], offset : int, length : int) : boolean </td></tr>
<tr><td align="left" balign="left"> # parseDeviceInfo(data : byte[], offset : int, length : int) : boolean </td></tr>
<tr><td align="left" balign="left"> # parseScan(data : byte[], offset : int, length : int) : boolean </td></tr>
<tr><td align="left" balign="left"> + setVerbose(verbose : boolean) </td></tr>
		</table></td></tr>
		</table>>, URL="./RpLidarLowLevelDriver.html", fontname="Helvetica", fontcolor="black", fontsize=9.0];
	// ev3dev.sensors.slamtec.service.RpLidarLowLevelDriver.ReadSerialThread
	c243 [label=<<table title="ev3dev.sensors.slamtec.service.RpLidarLowLevelDriver.ReadSerialThread" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./RpLidarLowLevelDriver.ReadSerialThread.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> ReadSerialThread </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> ~ data : byte[] </td></tr>
<tr><td align="left" balign="left"> ~ size : int </td></tr>
<tr><td align="left" balign="left"> ~ run : boolean </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + ReadSerialThread() </td></tr>
<tr><td align="left" balign="left"> + requestStop() </td></tr>
<tr><td align="left" balign="left"> + run() </td></tr>
		</table></td></tr>
		</table>>, URL="./RpLidarLowLevelDriver.ReadSerialThread.html", fontname="Helvetica", fontcolor="black", fontsize=9.0];
	// ev3dev.sensors.slamtec.service.RpLidarMeasurement
	c244 [label=<<table title="ev3dev.sensors.slamtec.service.RpLidarMeasurement" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./RpLidarMeasurement.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> RpLidarMeasurement </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + start : boolean </td></tr>
<tr><td align="left" balign="left"> + quality : int </td></tr>
<tr><td align="left" balign="left"> + angle : int </td></tr>
<tr><td align="left" balign="left"> + distance : int </td></tr>
<tr><td align="left" balign="left"> + timeMilli : long </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + RpLidarMeasurement() </td></tr>
<tr><td align="left" balign="left"> + isInvalid() : boolean </td></tr>
		</table></td></tr>
		</table>>, URL="./RpLidarMeasurement.html", fontname="Helvetica", fontcolor="black", fontsize=9.0];
	//ev3dev.sensors.slamtec.RPLidarA1Driver implements ev3dev.sensors.slamtec.service.RpLidarListener
	c241:p -> c231:p [dir=back,arrowtail=empty,style=dashed];
	// ev3dev.sensors.slamtec.RPLidarA1Driver NAVASSOC ev3dev.sensors.slamtec.service.RpLidarLowLevelDriver
	c231:p -> c242:p [taillabel="", label="", headlabel="", fontname="Helvetica", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// ev3dev.sensors.slamtec.service.RpLidarLowLevelDriver NAVASSOC ev3dev.sensors.slamtec.service.RpLidarLowLevelDriver.ReadSerialThread
	c242:p -> c243:p [taillabel="", label="", headlabel="", fontname="Helvetica", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// ev3dev.sensors.slamtec.service.RpLidarLowLevelDriver NAVASSOC ev3dev.sensors.slamtec.service.RpLidarHeath
	c242:p -> c240:p [taillabel="", label="", headlabel="", fontname="Helvetica", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// ev3dev.sensors.slamtec.service.RpLidarLowLevelDriver NAVASSOC ev3dev.sensors.slamtec.service.RpLidarDeviceInfo
	c242:p -> c239:p [taillabel="", label="", headlabel="", fontname="Helvetica", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// ev3dev.sensors.slamtec.service.RpLidarLowLevelDriver NAVASSOC ev3dev.sensors.slamtec.service.RpLidarMeasurement
	c242:p -> c244:p [taillabel="", label="", headlabel="", fontname="Helvetica", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// ev3dev.sensors.slamtec.service.RpLidarLowLevelDriver NAVASSOC ev3dev.sensors.slamtec.service.RpLidarListener
	c242:p -> c241:p [taillabel="", label="", headlabel="", fontname="Helvetica", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// ev3dev.sensors.slamtec.RPLidarA1Driver DEPEND ev3dev.sensors.slamtec.service.RpLidarDeviceInfo
	c231:p -> c239:p [taillabel="", label="", headlabel="", fontname="Helvetica", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	// ev3dev.sensors.slamtec.RPLidarA1Driver DEPEND ev3dev.sensors.slamtec.service.RpLidarHeath
	c231:p -> c240:p [taillabel="", label="", headlabel="", fontname="Helvetica", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	// ev3dev.sensors.slamtec.RPLidarA1Driver DEPEND ev3dev.sensors.slamtec.service.RpLidarMeasurement
	c231:p -> c244:p [taillabel="", label="", headlabel="", fontname="Helvetica", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
}

