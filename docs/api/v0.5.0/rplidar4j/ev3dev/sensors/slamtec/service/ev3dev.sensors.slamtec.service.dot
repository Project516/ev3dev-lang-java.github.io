#!/usr/local/bin/dot
#
# Class diagram 
# Generated by UMLGraph version R5_6-24-gf6e263 (http://www.umlgraph.org/)
#

digraph G {
	edge [fontname="Helvetica",fontsize=10,labelfontname="Helvetica",labelfontsize=10];
	node [fontname="Helvetica",fontsize=10,shape=plaintext];
	nodesep=0.25;
	ranksep=0.5;
	// ev3dev.sensors.slamtec.service.GrowQueue_I32
	c40 [label=<<table title="ev3dev.sensors.slamtec.service.GrowQueue_I32" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./GrowQueue_I32.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> GrowQueue_I32 </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + data : int[] </td></tr>
<tr><td align="left" balign="left"> + size : int </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + GrowQueue_I32(maxSize : int) </td></tr>
<tr><td align="left" balign="left"> + GrowQueue_I32() </td></tr>
<tr><td align="left" balign="left"> + reset() </td></tr>
<tr><td align="left" balign="left"> + addAll(queue : GrowQueue_I32) </td></tr>
<tr><td align="left" balign="left"> + addAll(array : int[], startIndex : int, endIndex : int) </td></tr>
<tr><td align="left" balign="left"> + add(value : int) </td></tr>
<tr><td align="left" balign="left"> + push(val : int) </td></tr>
<tr><td align="left" balign="left"> + get(index : int) : int </td></tr>
<tr><td align="left" balign="left"> + unsafe_get(index : int) : int </td></tr>
<tr><td align="left" balign="left"> + set(index : int, value : int) </td></tr>
<tr><td align="left" balign="left"> + setTo(original : GrowQueue_I32) </td></tr>
<tr><td align="left" balign="left"> + remove(index : int) </td></tr>
<tr><td align="left" balign="left"> + insert(index : int, value : int) </td></tr>
<tr><td align="left" balign="left"> + removeHead(total : int) </td></tr>
<tr><td align="left" balign="left"> + removeTail() : int </td></tr>
<tr><td align="left" balign="left"> + resize(size : int) </td></tr>
<tr><td align="left" balign="left"> + setMaxSize(size : int) </td></tr>
<tr><td align="left" balign="left"> + fill(value : int) </td></tr>
<tr><td align="left" balign="left"> + size() : int </td></tr>
<tr><td align="left" balign="left"> + pop() : int </td></tr>
<tr><td align="left" balign="left"> + indexOf(value : int) : int </td></tr>
		</table></td></tr>
		</table>>, URL="./GrowQueue_I32.html", fontname="Helvetica", fontcolor="black", fontsize=9.0];
	// ev3dev.sensors.slamtec.service.RpLidarDeviceInfo
	c41 [label=<<table title="ev3dev.sensors.slamtec.service.RpLidarDeviceInfo" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./RpLidarDeviceInfo.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> RpLidarDeviceInfo </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + model : int </td></tr>
<tr><td align="left" balign="left"> + firmware_minor : int </td></tr>
<tr><td align="left" balign="left"> + firmware_major : int </td></tr>
<tr><td align="left" balign="left"> + hardware : int </td></tr>
<tr><td align="left" balign="left"> + serialNumber : byte[] </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + RpLidarDeviceInfo() </td></tr>
<tr><td align="left" balign="left"> + print() </td></tr>
		</table></td></tr>
		</table>>, URL="./RpLidarDeviceInfo.html", fontname="Helvetica", fontcolor="black", fontsize=9.0];
	// ev3dev.sensors.slamtec.service.RpLidarHeath
	c42 [label=<<table title="ev3dev.sensors.slamtec.service.RpLidarHeath" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./RpLidarHeath.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> RpLidarHeath </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + status : int </td></tr>
<tr><td align="left" balign="left"> + error_code : int </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + RpLidarHeath() </td></tr>
<tr><td align="left" balign="left"> + print() </td></tr>
		</table></td></tr>
		</table>>, URL="./RpLidarHeath.html", fontname="Helvetica", fontcolor="black", fontsize=9.0];
	// ev3dev.sensors.slamtec.service.RpLidarListener
	c43 [label=<<table title="ev3dev.sensors.slamtec.service.RpLidarListener" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./RpLidarListener.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> &#171;interface&#187; </td></tr>
<tr><td align="center" balign="center"> RpLidarListener </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="9.0"> + handleMeasurement(measurement : RpLidarMeasurement) </font></td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="9.0"> + handleDeviceHealth(health : RpLidarHeath) </font></td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="9.0"> + handleDeviceInfo(info : RpLidarDeviceInfo) </font></td></tr>
		</table></td></tr>
		</table>>, URL="./RpLidarListener.html", fontname="Helvetica", fontcolor="black", fontsize=9.0];
	// ev3dev.sensors.slamtec.service.RpLidarLowLevelDriver
	c44 [label=<<table title="ev3dev.sensors.slamtec.service.RpLidarLowLevelDriver" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./RpLidarLowLevelDriver.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> RpLidarLowLevelDriver </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + SYNC_BYTE0 : byte </td></tr>
<tr><td align="left" balign="left"> + SYNC_BYTE1 : byte </td></tr>
<tr><td align="left" balign="left"> + STOP : byte </td></tr>
<tr><td align="left" balign="left"> + RESET : byte </td></tr>
<tr><td align="left" balign="left"> + SCAN : byte </td></tr>
<tr><td align="left" balign="left"> + FORCE_SCAN : byte </td></tr>
<tr><td align="left" balign="left"> + GET_INFO : byte </td></tr>
<tr><td align="left" balign="left"> + GET_HEALTH : byte </td></tr>
<tr><td align="left" balign="left"> + RCV_INFO : byte </td></tr>
<tr><td align="left" balign="left"> + RCV_HEALTH : byte </td></tr>
<tr><td align="left" balign="left"> + RCV_SCAN : byte </td></tr>
<tr><td align="left" balign="left"> ~ serialPort : SerialPort </td></tr>
<tr><td align="left" balign="left"> ~ in : InputStream </td></tr>
<tr><td align="left" balign="left"> ~ out : OutputStream </td></tr>
<tr><td align="left" balign="left"> ~ dataOut : byte[] </td></tr>
<tr><td align="left" balign="left"> ~ verbose : boolean </td></tr>
<tr><td align="left" balign="left"> - readThread : RpLidarLowLevelDriver.ReadSerialThread </td></tr>
<tr><td align="left" balign="left"> ~ health : RpLidarHeath </td></tr>
<tr><td align="left" balign="left"> ~ deviceInfo : RpLidarDeviceInfo </td></tr>
<tr><td align="left" balign="left"> ~ measurement : RpLidarMeasurement </td></tr>
<tr><td align="left" balign="left"> ~ listener : RpLidarListener </td></tr>
<tr><td align="left" balign="left"> ~ scanning : boolean </td></tr>
<tr><td align="left" balign="left"> ~ lastReceived : int </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + RpLidarLowLevelDriver(portName : String, listener : RpLidarListener) </td></tr>
<tr><td align="left" balign="left"> + pause(milli : long) </td></tr>
<tr><td align="left" balign="left"> + shutdown() </td></tr>
<tr><td align="left" balign="left"> + sendScan(timeout : long) : boolean </td></tr>
<tr><td align="left" balign="left"> + sendStop() </td></tr>
<tr><td align="left" balign="left"> + sendReset() </td></tr>
<tr><td align="left" balign="left"> + sendGetInfo(timeout : long) : boolean </td></tr>
<tr><td align="left" balign="left"> + sendGetHealth(timeout : long) : boolean </td></tr>
<tr><td align="left" balign="left"> # sendBlocking(command : byte, expected : byte, timeout : long) : boolean </td></tr>
<tr><td align="left" balign="left"> # sendNoPayLoad(command : byte) </td></tr>
<tr><td align="left" balign="left"> # parseData(data : byte[], length : int) : int </td></tr>
<tr><td align="left" balign="left"> # parsePacket(data : byte[], offset : int, length : int, type : byte) : boolean </td></tr>
<tr><td align="left" balign="left"> # parseHealth(data : byte[], offset : int, length : int) : boolean </td></tr>
<tr><td align="left" balign="left"> # parseDeviceInfo(data : byte[], offset : int, length : int) : boolean </td></tr>
<tr><td align="left" balign="left"> # parseScan(data : byte[], offset : int, length : int) : boolean </td></tr>
<tr><td align="left" balign="left"> + setVerbose(verbose : boolean) </td></tr>
		</table></td></tr>
		</table>>, URL="./RpLidarLowLevelDriver.html", fontname="Helvetica", fontcolor="black", fontsize=9.0];
	// ev3dev.sensors.slamtec.service.RpLidarLowLevelDriver.ReadSerialThread
	c45 [label=<<table title="ev3dev.sensors.slamtec.service.RpLidarLowLevelDriver.ReadSerialThread" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./RpLidarLowLevelDriver.ReadSerialThread.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> ReadSerialThread </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> ~ data : byte[] </td></tr>
<tr><td align="left" balign="left"> ~ size : int </td></tr>
<tr><td align="left" balign="left"> ~ run : boolean </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + ReadSerialThread() </td></tr>
<tr><td align="left" balign="left"> + requestStop() </td></tr>
<tr><td align="left" balign="left"> + run() </td></tr>
		</table></td></tr>
		</table>>, URL="./RpLidarLowLevelDriver.ReadSerialThread.html", fontname="Helvetica", fontcolor="black", fontsize=9.0];
	// ev3dev.sensors.slamtec.service.RpLidarMeasurement
	c46 [label=<<table title="ev3dev.sensors.slamtec.service.RpLidarMeasurement" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./RpLidarMeasurement.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> RpLidarMeasurement </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + start : boolean </td></tr>
<tr><td align="left" balign="left"> + quality : int </td></tr>
<tr><td align="left" balign="left"> + angle : int </td></tr>
<tr><td align="left" balign="left"> + distance : int </td></tr>
<tr><td align="left" balign="left"> + timeMilli : long </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + RpLidarMeasurement() </td></tr>
<tr><td align="left" balign="left"> + isInvalid() : boolean </td></tr>
		</table></td></tr>
		</table>>, URL="./RpLidarMeasurement.html", fontname="Helvetica", fontcolor="black", fontsize=9.0];
	// ev3dev.sensors.slamtec.service.RpLidarScan
	c47 [label=<<table title="ev3dev.sensors.slamtec.service.RpLidarScan" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./RpLidarScan.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> RpLidarScan </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + N : int </td></tr>
<tr><td align="left" balign="left"> + quality : int[] </td></tr>
<tr><td align="left" balign="left"> + distance : int[] </td></tr>
<tr><td align="left" balign="left"> + time : long[] </td></tr>
<tr><td align="left" balign="left"> + used : GrowQueue_I32 </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + RpLidarScan() </td></tr>
<tr><td align="left" balign="left"> + set(scan : RpLidarScan) </td></tr>
<tr><td align="left" balign="left"> + convertMeters(meters : double[]) </td></tr>
<tr><td align="left" balign="left"> + convertMilliMeters(meters : double[]) </td></tr>
<tr><td align="left" balign="left"> + reset() </td></tr>
<tr><td align="left" balign="left"> + isInvalid(which : int) : boolean </td></tr>
		</table></td></tr>
		</table>>, URL="./RpLidarScan.html", fontname="Helvetica", fontcolor="black", fontsize=9.0];
	// ev3dev.sensors.slamtec.service.RpLidarLowLevelDriver NAVASSOC ev3dev.sensors.slamtec.service.RpLidarLowLevelDriver.ReadSerialThread
	c44:p -> c45:p [taillabel="", label="", headlabel="", fontname="Helvetica", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// ev3dev.sensors.slamtec.service.RpLidarLowLevelDriver NAVASSOC ev3dev.sensors.slamtec.service.RpLidarHeath
	c44:p -> c42:p [taillabel="", label="", headlabel="", fontname="Helvetica", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// ev3dev.sensors.slamtec.service.RpLidarLowLevelDriver NAVASSOC ev3dev.sensors.slamtec.service.RpLidarDeviceInfo
	c44:p -> c41:p [taillabel="", label="", headlabel="", fontname="Helvetica", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// ev3dev.sensors.slamtec.service.RpLidarLowLevelDriver NAVASSOC ev3dev.sensors.slamtec.service.RpLidarMeasurement
	c44:p -> c46:p [taillabel="", label="", headlabel="", fontname="Helvetica", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// ev3dev.sensors.slamtec.service.RpLidarLowLevelDriver NAVASSOC ev3dev.sensors.slamtec.service.RpLidarListener
	c44:p -> c43:p [taillabel="", label="", headlabel="", fontname="Helvetica", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// ev3dev.sensors.slamtec.service.RpLidarScan NAVASSOC ev3dev.sensors.slamtec.service.GrowQueue_I32
	c47:p -> c40:p [taillabel="", label="", headlabel="", fontname="Helvetica", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
}

